import{S as e,r as t,p as r}from"./6cdd5e98.js";class a extends e{constructor(){super(),this.accentColor="blue"}static get tag(){return"learning-banner"}static get properties(){return{...super.properties,image:{type:String,attribute:"image"},type:{type:String,reflect:!0}}}updated(e){e.forEach(((e,t)=>{"type"===t&&"chem"===this[t]?this.accentColor="green":"type"===t&&"know"===this[t]?this.accentColor="blue":"type"===t&&"objectives"===this[t]&&(this.accentColor="orange")}))}static get styles(){return[...super.styles,t`:host{background-color:var(--simple-colors-default-theme-accent-7);font-family:'Open Sans',sans-serif}:host([dark]) #banner{background-color:var(--simple-colors-default-theme-accent-3)}.banner{background-color:var(--simple-colors-default-theme-accent-7);display:flex;flex-direction:row;color:#fff;font-family:'Open Sans',sans-serif;margin:0;border:1px,solid,var(--simple-colors-default-theme-accent-7);text-transform:uppercase}.grid{display:grid;grid-template-columns:1fr 4fr;align-items:center;grid-gap:10px}@media screen and (min-width:300px) and (max-width:650px){.banner{transition:all .35s ease-in-out;width:400px}}@media screen and (min-width:650px) and (max-width:1000px){.banner{transition:all .35s ease-in-out;width:600px}}`]}render(){return r` <div class="banner"> <div class="grid"> <div class="gridItem"> <slot name="icon"></slot> </div> <div class="gridItem"> <slot name="heading"></slot> <slot name="subHeading"></slot> </div> </div> </div> `}}customElements.define(a.tag,a);export{a as LearningBanner};
